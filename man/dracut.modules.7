'\" t
.\"     Title: dracut.modules
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 03/19/2024
.\"    Manual: dracut
.\"    Source: dracut 059-210-g9bd698c8
.\"  Language: English
.\"
.TH "DRACUT\&.MODULES" "7" "03/19/2024" "dracut 059\-210\-g9bd698c8" "dracut"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dracut.modules \- dracut modules
.SH "DESCRIPTION"
.sp
dracut uses a modular system to build and extend the initramfs image\&. All modules are located in \fI/usr/lib/dracut/modules\&.d\fR or in \fI<git\-src>/modules\&.d\fR\&. The most basic dracut module is \fI99base\fR\&. In \fI99base\fR the initial shell script init is defined, which gets run by the kernel after initramfs loading\&. Although you can replace init with your own version of \fI99base\fR, this is not encouraged\&. Instead you should use, if possible, the hooks of dracut\&. All hooks, and the point of time in which they are executed, are described in the section called \(lqBOOT PROCESS STAGES\(rq\&.
.sp
The main script, which creates the initramfs is dracut itself\&. It parses all arguments and sets up the directory, in which everything is installed\&. It then executes all check, install, installkernel scripts found in the modules, which are to be processed\&. After everything is installed, the install directory is archived and compressed to the final initramfs image\&. All helper functions used by check, install and installkernel are found in in the file \fIdracut\-functions\fR\&. These shell functions are available to all module installer (install, installkernel) scripts, without the need to source \fIdracut\-functions\fR\&.
.sp
A module can check the preconditions for install and installkernel with the check script\&. Also dependencies can be expressed with check\&. If a module passed check, install and installkernel will be called to install all of the necessary files for the module\&. To split between kernel and non\-kernel parts of the installation, all kernel module related parts have to be in installkernel\&. All other files found in a module directory are module specific and mostly are hook scripts and udev rules\&.
.SH "BOOT PROCESS STAGES"
.sp
dracut modules can insert custom script at various points, to control the boot process\&. These hooks are plain directories containing shell scripts ending with "\&.sh", which are sourced by init\&. Common used functions are in \fIdracut\-lib\&.sh\fR, which can be sourced by any script\&.
.SS "Hook: cmdline"
.sp
The \fIcmdline\fR hook is a place to insert scripts to parse the kernel command line and prepare the later actions, like setting up udev rules and configuration files\&.
.sp
In this hook the most important environment variable is defined: root\&. The second one is rootok, which indicates, that a module claimed to be able to parse the root defined\&. So for example, \fBroot=\fR\fIiscsi:\&...\&.\fR will be claimed by the iscsi dracut module, which then sets rootok\&.
.SS "Hook: pre\-udev"
.sp
This hook is executed right after the cmdline hook and a check if root and rootok were set\&. Here modules can take action with the final root, and before udev has been run\&.
.SS "Start Udev"
.sp
Now udev is started and the logging for udev is setup\&.
.SS "Hook: pre\-trigger"
.sp
In this hook, you can set udev environment variables with \fBudevadm control \-\-property=KEY=\fR\fB\fIvalue\fR\fR or control the further execution of udev with udevadm\&.
.SS "Trigger Udev"
.sp
udev is triggered by calling udevadm trigger, which sends add events for all devices and subsystems\&.
.SS "Main Loop"
.sp
In the main loop of dracut loops until udev has settled and all scripts in \fIinitqueue/finished\fR returned true\&. In this loop there are three hooks, where scripts can be inserted by calling /sbin/initqueue\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBInitqueue\fR
.RS 4
.sp
This hook gets executed every time a script is inserted here, regardless of the udev state\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBInitqueue settled\fR
.RS 4
.sp
This hook (initqueue/settled) gets executed every time udev has settled\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBInitqueue timeout\fR
.RS 4
.sp
This hook (initqueue/timeout) gets executed, when the main loop counter becomes half of the rd\&.retry counter\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBInitqueue online\fR
.RS 4
.sp
This hook (initqueue/online) gets executed whenever a network interface comes online (that is, once it is up and configured by the configured network module)\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBInitqueue finished\fR
.RS 4
.sp
This hook (initqueue/finished) is called after udev has settled and if all scripts herein return 0 the main loop will be ended\&. Arbitrary scripts can be added here, to loop in the initqueue until something happens, which a dracut module wants to wait for\&.
.RE
.SS "Hook: pre\-mount"
.sp
Before the root device is mounted all scripts in the hook pre\-mount are executed\&. In some cases (e\&.g\&. NFS) the real root device is already mounted, though\&.
.SS "Hook: mount"
.sp
This hook is mainly to mount the real root device\&.
.SS "Hook: pre\-pivot"
.sp
This hook is called before cleanup hook, This is a good place for actions other than cleanups which need to be called before pivot\&.
.SS "Hook: cleanup"
.sp
This hook is the last hook and is called before init finally switches root to the real root device\&. This is a good place to clean up and kill processes not needed anymore\&.
.SS "Cleanup and switch_root"
.sp
Init (or systemd) kills all udev processes, cleans up the environment, sets up the arguments for the real init process and finally calls switch_root\&. switch_root removes the whole filesystem hierarchy of the initramfs, chroot()s to the real root device and calls /sbin/init with the specified arguments\&.
.sp
To ensure all files in the initramfs hierarchy can be removed, all processes still running from the initramfs should not have any open file descriptors left\&.
.SH "NETWORK INFRASTRUCTURE"
.sp
FIXME
.SH "WRITING A MODULE"
.sp
A simple example module is \fI90kernel\-modules\fR, which modprobes a kernel module after udev has settled and the basic device drivers have been loaded\&.
.sp
All module installation information is in the file module\-setup\&.sh\&.
.sp
First we create a check() function, which just exits with 0 indicating that this module should be included by default\&.
.sp
check():
.sp
.if n \{\
.RS 4
.\}
.nf
return 0
.fi
.if n \{\
.RE
.\}
.sp
Then we create the install() function, which installs a cmdline hook with priority number 20 called \fIparse\-insmodpost\&.sh\fR\&. It also installs the \fIinsmodpost\&.sh\fR script in \fI/sbin\fR\&.
.sp
install():
.sp
.if n \{\
.RS 4
.\}
.nf
inst_hook cmdline 20 "$moddir/parse\-insmodpost\&.sh"
inst_simple "$moddir/insmodpost\&.sh" /sbin/insmodpost\&.sh
.fi
.if n \{\
.RE
.\}
.sp
The \fIparse\-instmodpost\&.sh\fR parses the kernel command line for a argument rd\&.driver\&.post, blacklists the module from being autoloaded and installs the hook \fIinsmodpost\&.sh\fR in the \fIinitqueue/settled\fR\&.
.sp
\fIparse\-insmodpost\&.sh\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
for p in $(getargs rd\&.driver\&.post=); do
    echo "blacklist $p" >> /etc/modprobe\&.d/initramfsblacklist\&.conf
    _do_insmodpost=1
done

[ \-n "$_do_insmodpost" ] && /sbin/initqueue \-\-settled \-\-unique \-\-onetime /sbin/insmodpost\&.sh
unset _do_insmodpost
.fi
.if n \{\
.RE
.\}
.sp
\fIinsmodpost\&.sh\fR, which is called in the \fIinitqueue/settled\fR hook will just modprobe the kernel modules specified in all rd\&.driver\&.post kernel command line parameters\&. It runs after udev has settled and is only called once (\-\-onetime)\&.
.sp
\fIinsmodpost\&.sh\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
\&. /lib/dracut\-lib\&.sh

for p in $(getargs rd\&.driver\&.post=); do
    modprobe $p
done
.fi
.if n \{\
.RE
.\}
.SS "module\-setup\&.sh: check()"
.sp
\fIcheck()\fR is called by dracut to evaluate the inclusion of a dracut module in the initramfs\&.
.PP
$hostonly
.RS 4
If the $hostonly variable is set, then the module check() function should be in "hostonly" mode, which means, that the check() should only return 0, if the module is really needed to boot this specific host\&.
.RE
.sp
check() should return with:
.PP
0
.RS 4
Include the dracut module in the initramfs\&.
.RE
.PP
1
.RS 4
Do not include the dracut module\&. The requirements are not fulfilled (missing tools, etc\&.)
.RE
.PP
255
.RS 4
Only include the dracut module, if another module requires it or if explicitly specified in the config file or on the argument list\&.
.RE
.SS "module\-setup\&.sh: depends()"
.sp
The function depends() should echo all other dracut module names the module depends on\&.
.SS "module\-setup\&.sh: cmdline()"
.sp
This function should print the kernel command line options needed to boot the current machine setup\&. It should start with a space and should not print a newline\&.
.SS "module\-setup\&.sh: install()"
.sp
The install() function is called to install everything non\-kernel related\&. To install binaries, scripts, and other files, you can use the functions mentioned in [creation]\&.
.sp
To address a file in the current module directory, use the variable "$moddir"\&.
.SS "module\-setup\&.sh: installkernel()"
.sp
In installkernel() all kernel related files should be installed\&. You can use all of the functions mentioned in [creation] to install files\&.
.SS "Creation Functions"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinst_multiple [-o] <file> [ <file> \&...]\fR
.RS 4
.sp
installs multiple binaries and files\&. If executables are specified without a path, dracut will search the path PATH=/usr/sbin:/sbin:/usr/bin:/bin for the binary\&. If the option "\-o" is given as the first parameter, a missing file does not lead to an error\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinst <src> [<dst>]\fR
.RS 4
.sp
installs \fIone\fR file <src> either to the same place in the initramfs or to an optional <dst>\&. inst with more than two arguments is treated the same as inst_multiple, all arguments are treated as files to install and none as install destinations\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinst_hook <hookdir> <prio> <src>\fR
.RS 4
.sp
installs an executable/script <src> in the dracut hook <hookdir> with priority <prio>\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinst_rules <udevrule> [ <udevrule> \&...]\fR
.RS 4
.sp
installs one or more udev rules\&. Non\-existent udev rules are reported, but do not let dracut fail\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinstmods <kernelmodule> [ <kernelmodule> \&... ]\fR
.RS 4
.sp
instmods should be used only in the installkernel() function\&.
.sp
instmods installs one or more kernel modules in the initramfs\&. <kernelmodule> can also be a whole subsystem, if prefixed with a "=", like "=drivers/net/team"\&.
.sp
instmods will not install the kernel module, if $hostonly is set and the kernel module is not currently needed by any /sys/\fB\&...\fR/uevent MODALIAS\&. To install a kernel module regardless of the hostonly mode use the form:
.sp
.if n \{\
.RS 4
.\}
.nf
hostonly=\*(Aq\*(Aq instmods <kernelmodule>
.fi
.if n \{\
.RE
.\}
.RE
.SS "Initramfs Functions"
.sp
FIXME
.SS "Network Modules"
.sp
FIXME
.SH "AUTHOR"
.sp
Harald Hoyer
.SH "SEE ALSO"
.sp
\fBdracut\fR(8)
